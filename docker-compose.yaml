version: "3.9"

services:
  app:
    build: .
    ports:
      - "8081:8080"
    networks:
      - local
    env_file:
      - .env
    depends_on:
      goose:
        condition: service_started
      redis:
        condition: service_healthy
    restart: on-failure
  goose:
    build: ./migration
    networks:
      - local
    volumes:
      - "./migration:/migration"
    command:
      [ "goose", "-dir", "/migration", "postgres", "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable", "up" ]
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    networks:
      - local
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - local
    volumes:
      - "redis-data:/var/lib/redis"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

networks:
  local:
    driver: bridge

volumes:
  postgres-data:
  redis-data: